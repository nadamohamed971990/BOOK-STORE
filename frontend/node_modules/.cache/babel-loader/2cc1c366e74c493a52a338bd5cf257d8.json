{"ast":null,"code":"/* AXIOS */\nimport axios from \"axios\";\n/* ACTION TYPES */\n\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_RESET, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_FAIL, USER_DELETE_SUCCESS, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from \"../constants/userConstants\";\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\n/* ACTION CREATOR USED IN USER LOGIN IN LoginScreen COMPONENT & HEADER */\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    /* MAKE POST REQUEST TO GET BACK THE USER TOKEN */\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login/\", {\n      username: email,\n      password: password\n    }, config);\n    /* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    /* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n/* ACTION CREATOR USED IN USER LOGOUT IN LoginScreen COMPONENT & HEADER */\n\nexport const logout = () => dispatch => {\n  /* REMOVE USER INFO FORM LOCAL STORAGE */\n  localStorage.removeItem(\"userInfo\");\n  /* DISPATCH TO REMOVE USER INFO FORM STORE */\n\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  /* DISPATCH TO RESET THE DETAILS OF ORDERS MADE BY USER */\n\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  /* DISPATCH TO RESET THE DETAILS OF USERS LIST */\n\n  dispatch({\n    type: USER_LIST_RESET\n  });\n};\n/* ACTION CREATOR USED IN USER REGISTRATION IN RegisterScreen COMPONENT & HEADER */\n\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    /* MAKE POST REQUEST TO GET BACK THE USER TOKEN */\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/register/\", {\n      name: name,\n      email: email,\n      password: password\n    }, config);\n    /* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    /* AFTER REGISTRATION WE WANT TO IMMEDIATELY LOGIN THE USER */\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    /* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n/* ACTION CREATOR USED IN GETTING USER DETAILS IN ProfileScreen COMPONENT  */\n\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    }); // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    /* MAKE GET REQUEST TO GET BACK THE USER DATA */\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n        /* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */\n\n      }\n    }; // USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\n\n    const {\n      data\n    } = await axios.get(`/api/users/${id}/`, config);\n    /* IF GET REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n/* ACTION CREATOR USED IN UPDATING USER DETAILS IN ProfileScreen COMPONENT  */\n\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    }); // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    /* MAKE PUT REQUEST TO SET THE THE USER DATA */\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n        /* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */\n\n      }\n    }; // USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\n\n    const {\n      data\n    } = await axios.put(`/api/users/profile/update`, user, config);\n    /* IF PUT REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    /* AFTER UPDATING PROFILE INFORMATION WE WANT TO LOG THE USER IN WITH THE UPDATED INFO */\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    /* SETTING UPDATED VALUE OF USER INFO IN LOCAL STORAGE */\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n/* ACTION CREATOR USED TO GET THE LIST OF USERS IN UserList SCREEN  */\n\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    }); // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    /* MAKE GET REQUEST TO SET THE THE USERS LIST */\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n        /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO SEE LIST OF USERS */\n\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n/* ACTION CREATOR USED TO DELETE A USER IN UserList SCREEN */\n\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    }); // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    /* MAKE DELETE REQUEST TO DELETE THE USER */\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n        /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO DELETE THE USER */\n\n      }\n    };\n    const {\n      data\n    } = await axios.delete(`/api/users/delete/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n/* ACTION CREATOR USED TO EDIT A USER IN UserUpdate SCREEN */\n\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    }); // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    /* MAKE PUT REQUEST TO EDIT THE USER */\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n        /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO EDIT THE USER */\n\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/update/${user._id}/`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    /* AFTER UPDATING WE WANT TO RELOAD THE USER DATA */\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/electronica/projectITI/E-COMMERCE/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_FAIL","USER_DELETE_SUCCESS","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","ORDER_LIST_MY_RESET","login","email","password","dispatch","type","config","headers","data","post","username","payload","localStorage","setItem","JSON","stringify","error","response","detail","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","_id"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,WAJF,EAKEC,qBALF,EAMEC,qBANF,EAOEC,kBAPF,EAQEC,oBARF,EASEC,oBATF,EAUEC,iBAVF,EAWEC,kBAXF,EAYEC,2BAZF,EAaEC,2BAbF,EAcEC,wBAdF,EAeEC,iBAfF,EAgBEC,iBAhBF,EAiBEC,cAjBF,EAkBEC,eAlBF,EAmBEC,mBAnBF,EAoBEC,gBApBF,EAqBEC,mBArBF,EAsBEC,mBAtBF,EAuBEC,mBAvBF,EAwBEC,gBAxBF,QAyBO,4BAzBP;AA2BA,SAASC,mBAAT,QAAoC,6BAApC;AAEA;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE7B;AADC,KAAD,CAAR;AAIA;;AACA,UAAM8B,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMjC,KAAK,CAACkC,IAAN,CACrB,mBADqB,EAErB;AAAEC,MAAAA,QAAQ,EAAER,KAAZ;AAAmBC,MAAAA,QAAQ,EAAEA;AAA7B,KAFqB,EAGrBG,MAHqB,CAAvB;AAMA;;AACAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE5B,kBADC;AAEPkC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKA;;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;AACD,GA1BD,CA0BE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE3B,eADC;AAEPiC,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CApCM;AAsCP;;AACA,OAAO,MAAMC,MAAM,GAAG,MAAOhB,QAAD,IAAc;AACxC;AACAQ,EAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AAEA;;AACAjB,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAE1B;AADC,GAAD,CAAR;AAGAyB,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEnB;AADC,GAAD,CAAR;AAGA;;AACAkB,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEL;AADC,GAAD,CAAR;AAGA;;AACAI,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEZ;AADC,GAAD,CAAR;AAGD,CAnBM;AAqBP;;AACA,OAAO,MAAM6B,QAAQ,GAAG,CAACC,IAAD,EAAOrB,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AACrE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEzB;AADC,KAAD,CAAR;AAIA;;AACA,UAAM0B,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMjC,KAAK,CAACkC,IAAN,CACrB,sBADqB,EAErB;AAAEc,MAAAA,IAAI,EAAEA,IAAR;AAAcrB,MAAAA,KAAK,EAAEA,KAArB;AAA4BC,MAAAA,QAAQ,EAAEA;AAAtC,KAFqB,EAGrBG,MAHqB,CAAvB;AAMA;;AACAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAExB,qBADC;AAEP8B,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKA;;AACAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE5B,kBADC;AAEPkC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKA;;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;AACD,GAhCD,CAgCE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEvB,kBADC;AAEP6B,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CA1CM;AA4CP;;AACA,OAAO,MAAMK,cAAc,GAAIC,EAAD,IAAQ,OAAOrB,QAAP,EAAiBsB,QAAjB,KAA8B;AAClE,MAAI;AACFtB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEtB;AADC,KAAD,CAAR,CADE,CAKF;;AACA,UAAM;AACJ4C,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA;;AACA,UAAMpB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPsB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AAAE;;AAFnC;AADI,KAAf,CAXE,CAkBF;;AACA,UAAM;AAAEtB,MAAAA;AAAF,QAAW,MAAMjC,KAAK,CAACwD,GAAN,CAAW,cAAaN,EAAG,GAA3B,EAA+BnB,MAA/B,CAAvB;AAEA;;AACAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAErB,oBADC;AAEP2B,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GA1BD,CA0BE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEpB,iBADC;AAEP0B,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CApCM;AAsCP;;AACA,OAAO,MAAMa,iBAAiB,GAAIC,IAAD,IAAU,OAAO7B,QAAP,EAAiBsB,QAAjB,KAA8B;AACvE,MAAI;AACFtB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAElB;AADC,KAAD,CAAR,CADE,CAKF;;AACA,UAAM;AACJwC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA;;AACA,UAAMpB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPsB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AAAE;;AAFnC;AADI,KAAf,CAXE,CAkBF;;AACA,UAAM;AAAEtB,MAAAA;AAAF,QAAW,MAAMjC,KAAK,CAAC2D,GAAN,CAAW,2BAAX,EAAuCD,IAAvC,EAA6C3B,MAA7C,CAAvB;AAEA;;AACAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEjB,2BADC;AAEPuB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKA;;AACAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE5B,kBADC;AAEPkC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKA;;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;AACD,GAnCD,CAmCE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEhB,wBADC;AAEPsB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CA7CM;AA+CP;;AACA,OAAO,MAAMgB,SAAS,GAAG,MAAM,OAAO/B,QAAP,EAAiBsB,QAAjB,KAA8B;AAC3D,MAAI;AACFtB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR,CADE,CAKF;;AACA,UAAM;AACJqC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA;;AACA,UAAMpB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPsB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AAAE;;AAFnC;AADI,KAAf;AAOA,UAAM;AAAEtB,MAAAA;AAAF,QAAW,MAAMjC,KAAK,CAACwD,GAAN,CAAW,aAAX,EAAyBzB,MAAzB,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEd,iBADC;AAEPoB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAxBD,CAwBE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEb,cADC;AAEPmB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CAlCM;AAoCP;;AACA,OAAO,MAAMiB,UAAU,GAAIX,EAAD,IAAQ,OAAOrB,QAAP,EAAiBsB,QAAjB,KAA8B;AAC9D,MAAI;AACFtB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR,CADE,CAKF;;AACA,UAAM;AACJiC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA;;AACA,UAAMpB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPsB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AAAE;;AAFnC;AADI,KAAf;AAOA,UAAM;AAAEtB,MAAAA;AAAF,QAAW,MAAMjC,KAAK,CAAC8D,MAAN,CAAc,qBAAoBZ,EAAG,EAArC,EAAwCnB,MAAxC,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET,mBADC;AAEPe,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAxBD,CAwBE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,gBADC;AAEPgB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CAlCM;AAoCP;;AACA,OAAO,MAAMmB,UAAU,GAAIL,IAAD,IAAU,OAAO7B,QAAP,EAAiBsB,QAAjB,KAA8B;AAChE,MAAI;AACFtB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR,CADE,CAKF;;AACA,UAAM;AACJ8B,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA;;AACA,UAAMpB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPsB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AAAE;;AAFnC;AADI,KAAf;AAOA,UAAM;AAAEtB,MAAAA;AAAF,QAAW,MAAMjC,KAAK,CAAC2D,GAAN,CACpB,qBAAoBD,IAAI,CAACM,GAAI,GADT,EAErBN,IAFqB,EAGrB3B,MAHqB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP;AADC,KAAD,CAAR;AAIA;;AACAM,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAErB,oBADC;AAEP2B,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAjCD,CAiCE,OAAOQ,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN,gBADC;AAEPY,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CA3CM","sourcesContent":["/* AXIOS */\nimport axios from \"axios\";\n\n/* ACTION TYPES */\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_DETAILS_RESET,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_FAIL,\n  USER_LIST_RESET,\n  USER_DELETE_REQUEST,\n  USER_DELETE_FAIL,\n  USER_DELETE_SUCCESS,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIL,\n} from \"../constants/userConstants\";\n\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\n\n/* ACTION CREATOR USED IN USER LOGIN IN LoginScreen COMPONENT & HEADER */\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    /* MAKE POST REQUEST TO GET BACK THE USER TOKEN */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"/api/users/login/\",\n      { username: email, password: password },\n      config\n    );\n\n    /* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    /* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED IN USER LOGOUT IN LoginScreen COMPONENT & HEADER */\nexport const logout = () => (dispatch) => {\n  /* REMOVE USER INFO FORM LOCAL STORAGE */\n  localStorage.removeItem(\"userInfo\");\n\n  /* DISPATCH TO REMOVE USER INFO FORM STORE */\n  dispatch({\n    type: USER_LOGOUT,\n  });\n  dispatch({\n    type: USER_DETAILS_RESET,\n  });\n  /* DISPATCH TO RESET THE DETAILS OF ORDERS MADE BY USER */\n  dispatch({\n    type: ORDER_LIST_MY_RESET,\n  });\n  /* DISPATCH TO RESET THE DETAILS OF USERS LIST */\n  dispatch({\n    type: USER_LIST_RESET,\n  });\n};\n\n/* ACTION CREATOR USED IN USER REGISTRATION IN RegisterScreen COMPONENT & HEADER */\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    });\n\n    /* MAKE POST REQUEST TO GET BACK THE USER TOKEN */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"/api/users/register/\",\n      { name: name, email: email, password: password },\n      config\n    );\n\n    /* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data,\n    });\n\n    /* AFTER REGISTRATION WE WANT TO IMMEDIATELY LOGIN THE USER */\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    /* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED IN GETTING USER DETAILS IN ProfileScreen COMPONENT  */\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE GET REQUEST TO GET BACK THE USER DATA */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */,\n      },\n    };\n\n    // USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\n    const { data } = await axios.get(`/api/users/${id}/`, config);\n\n    /* IF GET REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED IN UPDATING USER DETAILS IN ProfileScreen COMPONENT  */\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE PUT REQUEST TO SET THE THE USER DATA */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */,\n      },\n    };\n\n    // USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\n    const { data } = await axios.put(`/api/users/profile/update`, user, config);\n\n    /* IF PUT REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data,\n    });\n\n    /* AFTER UPDATING PROFILE INFORMATION WE WANT TO LOG THE USER IN WITH THE UPDATED INFO */\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    /* SETTING UPDATED VALUE OF USER INFO IN LOCAL STORAGE */\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED TO GET THE LIST OF USERS IN UserList SCREEN  */\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE GET REQUEST TO SET THE THE USERS LIST */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO SEE LIST OF USERS */,\n      },\n    };\n\n    const { data } = await axios.get(`/api/users/`, config);\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED TO DELETE A USER IN UserList SCREEN */\nexport const deleteUser = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE DELETE REQUEST TO DELETE THE USER */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO DELETE THE USER */,\n      },\n    };\n\n    const { data } = await axios.delete(`/api/users/delete/${id}`, config);\n\n    dispatch({\n      type: USER_DELETE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\n/* ACTION CREATOR USED TO EDIT A USER IN UserUpdate SCREEN */\nexport const updateUser = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST,\n    });\n\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    /* MAKE PUT REQUEST TO EDIT THE USER */\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO EDIT THE USER */,\n      },\n    };\n\n    const { data } = await axios.put(\n      `/api/users/update/${user._id}/`,\n      user,\n      config\n    );\n\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n    });\n\n    /* AFTER UPDATING WE WANT TO RELOAD THE USER DATA */\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}